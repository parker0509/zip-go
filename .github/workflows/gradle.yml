name: Java CI with Gradle and Docker Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Make Gradle Wrapper executable
      run: chmod +x ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and Push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/zip-go .
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/zip-go

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH to EC2 and deploy Docker containers
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Ensure the app directory exists
            mkdir -p app
            cd app

            # Check if docker-compose.yml exists in the app directory
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml not found! Exiting."
              exit 1
            fi

            # Stop and remove existing containers
            docker-compose stop
            docker-compose rm -f

            # Remove old Docker image if exists
            docker rmi gkstnaosi/zip-go:latest || true

            # Login to DockerHub
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}

            # Pull the latest Docker image from DockerHub
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/zip-go:latest

            # Start the containers with docker-compose
            docker-compose up -d
