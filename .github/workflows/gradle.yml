name: Java CI with Gradle and Docker Deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Give gradlew execute permission
        run: chmod +x ./gradlew  # gradlew에 실행 권한 부여

      - name: Build with Gradle
        run: ./gradlew build  # Gradle로 프로젝트 빌드

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # GitHub Secrets에서 Docker Hub 사용자명 가져오기
          password: ${{ secrets.DOCKER_HUB_TOKEN }}  # GitHub Secrets에서 Docker Hub 액세스 토큰 가져오기

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/zip-go:${{ github.sha }} .  # 이미지를 빌드하고 SHA로 태그 지정

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/zip-go:${{ github.sha }}  # Docker Hub에 푸시

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # 리포지토리 코드를 체크아웃

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose  # Docker Compose 설치

      - name: SSH to EC2 and deploy Docker containers
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 호스트 주소
          username: ${{ secrets.EC2_USER }}  # EC2 SSH 사용자명
          key: ${{ secrets.EC2_SSH_KEY }}  # EC2 SSH 비밀키 (GitHub Secrets에 저장)
          debug: true  # 디버그 모드 활성화
          script: |
            # Ensure the app directory exists
            mkdir -p app
            cd app
            
            # Check if docker-compose.yml exists in the app directory
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml not found! Exiting."
              exit 1
            fi
            
            # 최신 Docker 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/zip-go:${{ github.sha }}
            
            # Docker Compose로 새로운 컨테이너 실행
            docker-compose down  # 현재 실행 중인 컨테이너들을 종료하고 삭제
            docker-compose up -d  # 새로운 컨테이너 실행
