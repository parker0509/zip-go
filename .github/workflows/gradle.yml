name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시할 때마다 CI/CD 실행
  pull_request:
    branches:
      - main  # main 브랜치에 대한 PR이 생성될 때마다 CI/CD 실행

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # 리포지토리 코드를 체크아웃

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Give gradlew execute permission
        run: chmod +x ./gradlew  # gradlew에 실행 권한 부여

      - name: Build with Gradle
        run: ./gradlew build  # Gradle로 프로젝트 빌드

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # GitHub Secrets에서 Docker Hub 사용자명 가져오기
          password: ${{ secrets.DOCKER_HUB_TOKEN }}  # GitHub Secrets에서 Docker Hub 액세스 토큰 가져오기

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/contiroom:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/contiroom:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push  # build_and_push job이 성공적으로 완료된 후에 실행

    steps:
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.3
        with:

          #문 제 발 생
          #ssh: handshake failed: ssh: unable to authenticate,
          # attempted methods [none publickey], no supported methods remain


          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd zip-go
            # 기존 컨테이너 정지 및 강제 삭제
            sudo docker-compose down --volumes --remove-orphans  # 컨테이너와 볼륨, 고아 컨테이너 삭제
            sudo docker rm -f contiroom  # 강제 컨테이너 삭제 (여기서 "contiroom"은 컨테이너 이름)
            sudo docker rmi -f gkstnaosi/contiroom:latest  # 강제로 이미지를 삭제
            sudo docker-compose pull --no-cache  # 새로 이미지를 다운받기
            sudo docker-compose up -d --build  # 새로운 이미지를 빌드하고 실행
      ##cd zip-go
      ##docker-compose stop
      #docker-compose rm -f
      #docker rmi gkstnaosi/zip-go:latest
      #docker-compose build --no-cache
      #docker-compose up -d


